name: CI

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  issues: write

jobs:
  # 1) テストだけ行うジョブ
  test:
    name: Test (both PR and push)
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm install

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run Prettier check
        id: prettier-check
        run: npm run format:check
        continue-on-error: true
      
      - name: Auto-fix formatting issues
        if: failure() && steps.prettier-check.outcome == 'failure'
        run: |
          npm run format
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: auto-fix formatting issues with Prettier"
          git push

      - name: Run tests
        run: npm test

      - name: Run lint
        run: npm run lint

      - name: Run coverage
        run: npm run test:coverage

      - name: Upload coverage to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@1e68e06f1dbfde0e4cefc87efeba9e4643565303
        with:
          files: ./coverage/**/clover.xml
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4.1.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts,**/jest.setup.js,**/webpack.config.js
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
      - name: Retrieve SonarQube Issues and Create GitHub Issues
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }}: \
              "https://sonarcloud.io/api/issues/search?componentKeys=${{ secrets.SONAR_PROJECT_KEY }}&types=BUG,VULNERABILITY,CODE_SMELL" \
              -o sonar_issues.json

          python <<EOF
          import json
          import requests
          import os

          GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
          REPO = "${{ github.repository }}"
          SONAR_ISSUES_FILE = "sonar_issues.json"

          def get_existing_open_issues():
              """Fetch all open GitHub issues using pagination."""
              issues = {}
              page = 1
              while True:
                  url = f"https://api.github.com/repos/{REPO}/issues?state=open&per_page=100&page={page}"
                  headers = {"Authorization": f"token {GITHUB_TOKEN}"}
                  response = requests.get(url, headers=headers)
                  response.raise_for_status()
                  data = response.json()
                  if not data:
                      break
                  for issue in data:
                      issues[issue["title"]] = issue
                  page += 1
              return issues

          def create_github_issue(title, body, labels):
              """Create a new GitHub issue."""
              url = f"https://api.github.com/repos/{REPO}/issues"
              headers = {
                  "Authorization": f"token {GITHUB_TOKEN}",
                  "Accept": "application/vnd.github.v3+json"
              }
              payload = {"title": title, "body": body, "labels": labels}
              response = requests.post(url, headers=headers, json=payload)
              response.raise_for_status()

          def main():
              """Main script to sync SonarQube issues with GitHub."""
              # Load SonarQube issues
              with open(SONAR_ISSUES_FILE) as f:
                  sonar_issues = json.load(f)["issues"]
              
              # Fetch all existing open GitHub issues
              existing_issues = get_existing_open_issues()
              
              # Process and create new issues
              for issue in sonar_issues:
                  title = f"SonarQube Issue: {issue['message']}"
                  if title in existing_issues:
                      print(f"Skipping existing open issue: {title}")
                      continue

                  # Generate labels based on severity and type
                  labels = [issue["severity"].capitalize(), issue["type"].replace("_", " ").capitalize()]

                  body = f"""
                  **Details**
                  - Severity: {issue['severity']}
                  - Type: {issue['type']}
                  - Rule: {issue['rule']}
                  - Component: {issue['component']}
                  
                  [View in SonarCloud](https://sonarcloud.io/project/issues?id=${{ secrets.SONAR_PROJECT_KEY }}&open={issue['key']})
                  """
                  create_github_issue(title, body, labels)

          if __name__ == "__main__":
              main()
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 2) mainブランチへのpush時にのみビルド＆Pagesデプロイを行うジョブ
  build_and_deploy:
    name: Build and Deploy to GitHub Pages
    needs: [test]  # テストジョブに成功してから続行
    runs-on: ubuntu-latest
    # pull_requestではなく、mainブランチにpushされた時だけ実行
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm install

      - name: Run Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: npm run build

      # Webpack等のビルド成果物がpublic/に出力される想定
      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
